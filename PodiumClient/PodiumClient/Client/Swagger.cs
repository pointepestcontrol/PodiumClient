// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Podium.Client
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// ----
    /// &gt; The API enables you to GET and POST information to Podium. All of
    /// the APIs are RESTful endpoints. The The Podium API is bundled in with
    /// your current pricing.
    ///
    ///
    /// ----
    /// # Authorization
    ///
    /// We use basic authorization.
    /// Authorization: "token goes here"
    /// The API token can be found on the [Settings
    /// page](https://app.podium.com/#//settings)
    ///
    ///
    ///
    /// Examples
    /// All requests are provided a code snippet in several languages. You can
    /// submit requests by running them through POSTMAN.
    ///
    /// Pagination
    /// All collection requests are paginated. You can page through the
    /// elements of the collection by making a
    ///
    /// # Help
    /// If you need help, please contact Podium Support at [(833)
    /// 276-3486](833-276-3486) or by chatting in from the [Podium
    /// dashboard](app.podium.com).
    /// </summary>
    public partial class PodiumAPI : ServiceClient<PodiumAPI>, IPodiumAPI
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public JsonSerializerSettings DeserializationSettings { get; private set; }

        /// <summary>
        /// Subscription credentials which uniquely identify client subscription.
        /// </summary>
        public ServiceClientCredentials Credentials { get; private set; }

        /// <summary>
        /// Initializes a new instance of the PodiumAPI class.
        /// </summary>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling PodiumAPI.Dispose(). False: will not dispose provided httpClient</param>
        protected PodiumAPI(HttpClient httpClient, bool disposeHttpClient) : base(httpClient, disposeHttpClient)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the PodiumAPI class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected PodiumAPI(params DelegatingHandler[] handlers) : base(handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the PodiumAPI class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected PodiumAPI(HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the PodiumAPI class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected PodiumAPI(System.Uri baseUri, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the PodiumAPI class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected PodiumAPI(System.Uri baseUri, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the PodiumAPI class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public PodiumAPI(ServiceClientCredentials credentials, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the PodiumAPI class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling PodiumAPI.Dispose(). False: will not dispose provided httpClient</param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public PodiumAPI(ServiceClientCredentials credentials, HttpClient httpClient, bool disposeHttpClient) : this(httpClient, disposeHttpClient)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the PodiumAPI class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public PodiumAPI(ServiceClientCredentials credentials, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the PodiumAPI class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public PodiumAPI(System.Uri baseUri, ServiceClientCredentials credentials, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            BaseUri = baseUri;
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the PodiumAPI class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public PodiumAPI(System.Uri baseUri, ServiceClientCredentials credentials, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            BaseUri = baseUri;
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// An optional partial-method to perform custom initialization.
        ///</summary>
        partial void CustomInitialize();
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            BaseUri = new System.Uri("https://platform.podium.com/api/v2");
            SerializationSettings = new JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new  List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            DeserializationSettings = new JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            CustomInitialize();
        }
        /// <summary>
        /// Fetch locations by Organization Id
        /// </summary>
        /// <remarks>
        /// This endpoint requires an organization Id. This Id will be given upon
        /// request by Podium.
        /// </remarks>
        /// <param name='orgId'>
        /// The Organization ID
        /// </param>
        /// <param name='pagenumber'>
        /// </param>
        /// <param name='pagesize'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<LocationsByOrgIdGetOKResponse>> LocationsByOrgIdGetWithHttpMessagesAsync(long orgId, long? pagenumber = default(long?), long? pagesize = default(long?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("orgId", orgId);
                tracingParameters.Add("pagenumber", pagenumber);
                tracingParameters.Add("pagesize", pagesize);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "LocationsByOrgIdGet", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "organizations/{orgId}/locations").ToString();
            _url = _url.Replace("{orgId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(orgId, SerializationSettings).Trim('"')));
            List<string> _queryParameters = new List<string>();
            if (pagenumber != null)
            {
                _queryParameters.Add(string.Format("page[number]={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pagenumber, SerializationSettings).Trim('"'))));
            }
            if (pagesize != null)
            {
                _queryParameters.Add(string.Format("page[size]={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pagesize, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<LocationsByOrgIdGetOKResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<LocationsByOrgIdGetOKResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get Invitations by Location
        /// </summary>
        /// <remarks>
        /// Returns all the Invitations sent for a given Location and optional date
        /// range.
        /// </remarks>
        /// <param name='locationId'>
        /// The Location ID
        /// </param>
        /// <param name='pagenumber'>
        /// </param>
        /// <param name='pagesize'>
        /// </param>
        /// <param name='fromDate'>
        /// </param>
        /// <param name='toDate'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<InvitationsByLocationGetOKResponse>> InvitationsByLocationGetWithHttpMessagesAsync(long locationId, long? pagenumber = default(long?), long? pagesize = default(long?), System.DateTime? fromDate = default(System.DateTime?), System.DateTime? toDate = default(System.DateTime?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("locationId", locationId);
                tracingParameters.Add("pagenumber", pagenumber);
                tracingParameters.Add("pagesize", pagesize);
                tracingParameters.Add("fromDate", fromDate);
                tracingParameters.Add("toDate", toDate);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "InvitationsByLocationGet", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "locations/{locationId}/invites").ToString();
            _url = _url.Replace("{locationId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(locationId, SerializationSettings).Trim('"')));
            List<string> _queryParameters = new List<string>();
            if (pagenumber != null)
            {
                _queryParameters.Add(string.Format("page[number]={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pagenumber, SerializationSettings).Trim('"'))));
            }
            if (pagesize != null)
            {
                _queryParameters.Add(string.Format("page[size]={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pagesize, SerializationSettings).Trim('"'))));
            }
            if (fromDate != null)
            {
                _queryParameters.Add(string.Format("fromDate={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(fromDate, new DateJsonConverter()).Trim('"'))));
            }
            if (toDate != null)
            {
                _queryParameters.Add(string.Format("toDate={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(toDate, new DateJsonConverter()).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<InvitationsByLocationGetOKResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<InvitationsByLocationGetOKResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get Summary by User Id
        /// </summary>
        /// <remarks>
        /// Returns a summary for the User
        /// </remarks>
        /// <param name='userId'>
        /// The User ID
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<SummaryByUserIdGetOKResponse>> SummaryByUserIdGetWithHttpMessagesAsync(long userId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("userId", userId);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "SummaryByUserIdGet", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "users/{userId}/summary").ToString();
            _url = _url.Replace("{userId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(userId, SerializationSettings).Trim('"')));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<SummaryByUserIdGetOKResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<SummaryByUserIdGetOKResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get Summary by Location Id
        /// </summary>
        /// <remarks>
        /// Returns a summary for the Location
        /// </remarks>
        /// <param name='locationId'>
        /// The Location ID
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<SummaryByLocationIdGetOKResponse>> SummaryByLocationIdGetWithHttpMessagesAsync(long locationId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("locationId", locationId);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "SummaryByLocationIdGet", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "locations/{locationId}/summary").ToString();
            _url = _url.Replace("{locationId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(locationId, SerializationSettings).Trim('"')));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<SummaryByLocationIdGetOKResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<SummaryByLocationIdGetOKResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get Reviews by Location
        /// </summary>
        /// <remarks>
        /// Returns all the Invitations sent for a given Location and optional date
        /// range.
        /// </remarks>
        /// <param name='locationId'>
        /// </param>
        /// <param name='pagenumber'>
        /// </param>
        /// <param name='pagesize'>
        /// </param>
        /// <param name='fromDate'>
        /// </param>
        /// <param name='toDate'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<ReviewsByLocationGetOKResponse>> ReviewsByLocationGetWithHttpMessagesAsync(string locationId, long? pagenumber = default(long?), long? pagesize = default(long?), System.DateTime? fromDate = default(System.DateTime?), System.DateTime? toDate = default(System.DateTime?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (locationId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "locationId");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("locationId", locationId);
                tracingParameters.Add("pagenumber", pagenumber);
                tracingParameters.Add("pagesize", pagesize);
                tracingParameters.Add("fromDate", fromDate);
                tracingParameters.Add("toDate", toDate);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "ReviewsByLocationGet", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "locations/{locationId}/reviews").ToString();
            _url = _url.Replace("{locationId}", System.Uri.EscapeDataString(locationId));
            List<string> _queryParameters = new List<string>();
            if (pagenumber != null)
            {
                _queryParameters.Add(string.Format("page[number]={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pagenumber, SerializationSettings).Trim('"'))));
            }
            if (pagesize != null)
            {
                _queryParameters.Add(string.Format("page[size]={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pagesize, SerializationSettings).Trim('"'))));
            }
            if (fromDate != null)
            {
                _queryParameters.Add(string.Format("fromDate={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(fromDate, new DateJsonConverter()).Trim('"'))));
            }
            if (toDate != null)
            {
                _queryParameters.Add(string.Format("toDate={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(toDate, new DateJsonConverter()).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<ReviewsByLocationGetOKResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<ReviewsByLocationGetOKResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get Summaries for websites by Location Id
        /// </summary>
        /// <remarks>
        /// Returns the summaries for websites linked to the given Location
        /// </remarks>
        /// <param name='locationId'>
        /// The Location ID
        /// </param>
        /// <param name='pagenumber'>
        /// </param>
        /// <param name='pagesize'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<SiteSummaryByLocationIdGetOKResponse>> SiteSummaryByLocationIdGetWithHttpMessagesAsync(long locationId, long? pagenumber = default(long?), long? pagesize = default(long?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("locationId", locationId);
                tracingParameters.Add("pagenumber", pagenumber);
                tracingParameters.Add("pagesize", pagesize);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "SiteSummaryByLocationIdGet", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "locations/{locationId}/sites/summary").ToString();
            _url = _url.Replace("{locationId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(locationId, SerializationSettings).Trim('"')));
            List<string> _queryParameters = new List<string>();
            if (pagenumber != null)
            {
                _queryParameters.Add(string.Format("page[number]={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pagenumber, SerializationSettings).Trim('"'))));
            }
            if (pagesize != null)
            {
                _queryParameters.Add(string.Format("page[size]={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pagesize, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<SiteSummaryByLocationIdGetOKResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<SiteSummaryByLocationIdGetOKResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Podium.Client
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// ----
    /// &gt; The API enables you to GET and POST information to Podium. All of
    /// the APIs are RESTful endpoints. The The Podium API is bundled in with
    /// your current pricing.
    ///
    ///
    /// ----
    /// # Authorization
    ///
    /// We use basic authorization.
    /// Authorization: "token goes here"
    /// The API token can be found on the [Settings
    /// page](https://app.podium.com/#//settings)
    ///
    ///
    ///
    /// Examples
    /// All requests are provided a code snippet in several languages. You can
    /// submit requests by running them through POSTMAN.
    ///
    /// Pagination
    /// All collection requests are paginated. You can page through the
    /// elements of the collection by making a
    ///
    /// # Help
    /// If you need help, please contact Podium Support at [(833)
    /// 276-3486](833-276-3486) or by chatting in from the [Podium
    /// dashboard](app.podium.com).
    /// </summary>
    public partial interface IPodiumAPI : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }

        /// <summary>
        /// Subscription credentials which uniquely identify client
        /// subscription.
        /// </summary>
        ServiceClientCredentials Credentials { get; }


        /// <summary>
        /// Fetch locations by Organization Id
        /// </summary>
        /// <remarks>
        /// This endpoint requires an organization Id. This Id will be given
        /// upon request by Podium.
        /// </remarks>
        /// <param name='orgId'>
        /// The Organization ID
        /// </param>
        /// <param name='pagenumber'>
        /// </param>
        /// <param name='pagesize'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<LocationsByOrgIdGetOKResponse>> LocationsByOrgIdGetWithHttpMessagesAsync(long orgId, long? pagenumber = default(long?), long? pagesize = default(long?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Invitations by Location
        /// </summary>
        /// <remarks>
        /// Returns all the Invitations sent for a given Location and optional
        /// date range.
        /// </remarks>
        /// <param name='locationId'>
        /// The Location ID
        /// </param>
        /// <param name='pagenumber'>
        /// </param>
        /// <param name='pagesize'>
        /// </param>
        /// <param name='fromDate'>
        /// </param>
        /// <param name='toDate'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<InvitationsByLocationGetOKResponse>> InvitationsByLocationGetWithHttpMessagesAsync(long locationId, long? pagenumber = default(long?), long? pagesize = default(long?), System.DateTime? fromDate = default(System.DateTime?), System.DateTime? toDate = default(System.DateTime?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Summary by User Id
        /// </summary>
        /// <remarks>
        /// Returns a summary for the User
        /// </remarks>
        /// <param name='userId'>
        /// The User ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<SummaryByUserIdGetOKResponse>> SummaryByUserIdGetWithHttpMessagesAsync(long userId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Summary by Location Id
        /// </summary>
        /// <remarks>
        /// Returns a summary for the Location
        /// </remarks>
        /// <param name='locationId'>
        /// The Location ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<SummaryByLocationIdGetOKResponse>> SummaryByLocationIdGetWithHttpMessagesAsync(long locationId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Reviews by Location
        /// </summary>
        /// <remarks>
        /// Returns all the Invitations sent for a given Location and optional
        /// date range.
        /// </remarks>
        /// <param name='locationId'>
        /// </param>
        /// <param name='pagenumber'>
        /// </param>
        /// <param name='pagesize'>
        /// </param>
        /// <param name='fromDate'>
        /// </param>
        /// <param name='toDate'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ReviewsByLocationGetOKResponse>> ReviewsByLocationGetWithHttpMessagesAsync(string locationId, long? pagenumber = default(long?), long? pagesize = default(long?), System.DateTime? fromDate = default(System.DateTime?), System.DateTime? toDate = default(System.DateTime?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Summaries for websites by Location Id
        /// </summary>
        /// <remarks>
        /// Returns the summaries for websites linked to the given Location
        /// </remarks>
        /// <param name='locationId'>
        /// The Location ID
        /// </param>
        /// <param name='pagenumber'>
        /// </param>
        /// <param name='pagesize'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<SiteSummaryByLocationIdGetOKResponse>> SiteSummaryByLocationIdGetWithHttpMessagesAsync(long locationId, long? pagenumber = default(long?), long? pagesize = default(long?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Podium.Client
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for PodiumAPI.
    /// </summary>
    public static partial class PodiumAPIExtensions
    {
            /// <summary>
            /// Fetch locations by Organization Id
            /// </summary>
            /// <remarks>
            /// This endpoint requires an organization Id. This Id will be given upon
            /// request by Podium.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgId'>
            /// The Organization ID
            /// </param>
            /// <param name='pagenumber'>
            /// </param>
            /// <param name='pagesize'>
            /// </param>
            public static LocationsByOrgIdGetOKResponse LocationsByOrgIdGet(this IPodiumAPI operations, long orgId, long? pagenumber = default(long?), long? pagesize = default(long?))
            {
                return operations.LocationsByOrgIdGetAsync(orgId, pagenumber, pagesize).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Fetch locations by Organization Id
            /// </summary>
            /// <remarks>
            /// This endpoint requires an organization Id. This Id will be given upon
            /// request by Podium.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgId'>
            /// The Organization ID
            /// </param>
            /// <param name='pagenumber'>
            /// </param>
            /// <param name='pagesize'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LocationsByOrgIdGetOKResponse> LocationsByOrgIdGetAsync(this IPodiumAPI operations, long orgId, long? pagenumber = default(long?), long? pagesize = default(long?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LocationsByOrgIdGetWithHttpMessagesAsync(orgId, pagenumber, pagesize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Invitations by Location
            /// </summary>
            /// <remarks>
            /// Returns all the Invitations sent for a given Location and optional date
            /// range.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='locationId'>
            /// The Location ID
            /// </param>
            /// <param name='pagenumber'>
            /// </param>
            /// <param name='pagesize'>
            /// </param>
            /// <param name='fromDate'>
            /// </param>
            /// <param name='toDate'>
            /// </param>
            public static InvitationsByLocationGetOKResponse InvitationsByLocationGet(this IPodiumAPI operations, long locationId, long? pagenumber = default(long?), long? pagesize = default(long?), System.DateTime? fromDate = default(System.DateTime?), System.DateTime? toDate = default(System.DateTime?))
            {
                return operations.InvitationsByLocationGetAsync(locationId, pagenumber, pagesize, fromDate, toDate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Invitations by Location
            /// </summary>
            /// <remarks>
            /// Returns all the Invitations sent for a given Location and optional date
            /// range.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='locationId'>
            /// The Location ID
            /// </param>
            /// <param name='pagenumber'>
            /// </param>
            /// <param name='pagesize'>
            /// </param>
            /// <param name='fromDate'>
            /// </param>
            /// <param name='toDate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<InvitationsByLocationGetOKResponse> InvitationsByLocationGetAsync(this IPodiumAPI operations, long locationId, long? pagenumber = default(long?), long? pagesize = default(long?), System.DateTime? fromDate = default(System.DateTime?), System.DateTime? toDate = default(System.DateTime?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InvitationsByLocationGetWithHttpMessagesAsync(locationId, pagenumber, pagesize, fromDate, toDate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Summary by User Id
            /// </summary>
            /// <remarks>
            /// Returns a summary for the User
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The User ID
            /// </param>
            public static SummaryByUserIdGetOKResponse SummaryByUserIdGet(this IPodiumAPI operations, long userId)
            {
                return operations.SummaryByUserIdGetAsync(userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Summary by User Id
            /// </summary>
            /// <remarks>
            /// Returns a summary for the User
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The User ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SummaryByUserIdGetOKResponse> SummaryByUserIdGetAsync(this IPodiumAPI operations, long userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SummaryByUserIdGetWithHttpMessagesAsync(userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Summary by Location Id
            /// </summary>
            /// <remarks>
            /// Returns a summary for the Location
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='locationId'>
            /// The Location ID
            /// </param>
            public static SummaryByLocationIdGetOKResponse SummaryByLocationIdGet(this IPodiumAPI operations, long locationId)
            {
                return operations.SummaryByLocationIdGetAsync(locationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Summary by Location Id
            /// </summary>
            /// <remarks>
            /// Returns a summary for the Location
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='locationId'>
            /// The Location ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SummaryByLocationIdGetOKResponse> SummaryByLocationIdGetAsync(this IPodiumAPI operations, long locationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SummaryByLocationIdGetWithHttpMessagesAsync(locationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Reviews by Location
            /// </summary>
            /// <remarks>
            /// Returns all the Invitations sent for a given Location and optional date
            /// range.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='locationId'>
            /// </param>
            /// <param name='pagenumber'>
            /// </param>
            /// <param name='pagesize'>
            /// </param>
            /// <param name='fromDate'>
            /// </param>
            /// <param name='toDate'>
            /// </param>
            public static ReviewsByLocationGetOKResponse ReviewsByLocationGet(this IPodiumAPI operations, string locationId, long? pagenumber = default(long?), long? pagesize = default(long?), System.DateTime? fromDate = default(System.DateTime?), System.DateTime? toDate = default(System.DateTime?))
            {
                return operations.ReviewsByLocationGetAsync(locationId, pagenumber, pagesize, fromDate, toDate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Reviews by Location
            /// </summary>
            /// <remarks>
            /// Returns all the Invitations sent for a given Location and optional date
            /// range.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='locationId'>
            /// </param>
            /// <param name='pagenumber'>
            /// </param>
            /// <param name='pagesize'>
            /// </param>
            /// <param name='fromDate'>
            /// </param>
            /// <param name='toDate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReviewsByLocationGetOKResponse> ReviewsByLocationGetAsync(this IPodiumAPI operations, string locationId, long? pagenumber = default(long?), long? pagesize = default(long?), System.DateTime? fromDate = default(System.DateTime?), System.DateTime? toDate = default(System.DateTime?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReviewsByLocationGetWithHttpMessagesAsync(locationId, pagenumber, pagesize, fromDate, toDate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Summaries for websites by Location Id
            /// </summary>
            /// <remarks>
            /// Returns the summaries for websites linked to the given Location
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='locationId'>
            /// The Location ID
            /// </param>
            /// <param name='pagenumber'>
            /// </param>
            /// <param name='pagesize'>
            /// </param>
            public static SiteSummaryByLocationIdGetOKResponse SiteSummaryByLocationIdGet(this IPodiumAPI operations, long locationId, long? pagenumber = default(long?), long? pagesize = default(long?))
            {
                return operations.SiteSummaryByLocationIdGetAsync(locationId, pagenumber, pagesize).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Summaries for websites by Location Id
            /// </summary>
            /// <remarks>
            /// Returns the summaries for websites linked to the given Location
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='locationId'>
            /// The Location ID
            /// </param>
            /// <param name='pagenumber'>
            /// </param>
            /// <param name='pagesize'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteSummaryByLocationIdGetOKResponse> SiteSummaryByLocationIdGetAsync(this IPodiumAPI operations, long locationId, long? pagenumber = default(long?), long? pagesize = default(long?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SiteSummaryByLocationIdGetWithHttpMessagesAsync(locationId, pagenumber, pagesize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Podium.Client.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Invitation
    /// </summary>
    public partial class Invitation
    {
        /// <summary>
        /// Initializes a new instance of the Invitation class.
        /// </summary>
        public Invitation()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Invitation class.
        /// </summary>
        /// <param name="id">The Invitation ID</param>
        /// <param name="phoneNumber">The Phone number the invitation was sent
        /// to</param>
        /// <param name="organizationId">The Organization ID</param>
        /// <param name="createdAt">The Date and time the Invitation was
        /// created</param>
        /// <param name="updatedAt">The Date and time the Invitation was
        /// wupdated</param>
        /// <param name="userId">The User ID of the user that sent the
        /// invitation</param>
        /// <param name="locationId">The Location ID</param>
        /// <param name="customerId">The ID of the customer</param>
        /// <param name="email">The customers email</param>
        public Invitation(long? id = default(long?), string phoneNumber = default(string), bool? lastInvitationSent = default(bool?), long? organizationId = default(long?), System.DateTime? createdAt = default(System.DateTime?), System.DateTime? updatedAt = default(System.DateTime?), string reviewPageUrl = default(string), long? userId = default(long?), bool? test = default(bool?), long? locationId = default(long?), long? customerId = default(long?), string email = default(string))
        {
            Id = id;
            PhoneNumber = phoneNumber;
            LastInvitationSent = lastInvitationSent;
            OrganizationId = organizationId;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            ReviewPageUrl = reviewPageUrl;
            UserId = userId;
            Test = test;
            LocationId = locationId;
            CustomerId = customerId;
            Email = email;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the Invitation ID
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or sets the Phone number the invitation was sent to
        /// </summary>
        [JsonProperty(PropertyName = "phoneNumber")]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastInvitationSent")]
        public bool? LastInvitationSent { get; set; }

        /// <summary>
        /// Gets or sets the Organization ID
        /// </summary>
        [JsonProperty(PropertyName = "organizationId")]
        public long? OrganizationId { get; set; }

        /// <summary>
        /// Gets or sets the Date and time the Invitation was created
        /// </summary>
        [JsonProperty(PropertyName = "createdAt")]
        public System.DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Gets or sets the Date and time the Invitation was wupdated
        /// </summary>
        [JsonProperty(PropertyName = "updatedAt")]
        public System.DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "reviewPageUrl")]
        public string ReviewPageUrl { get; set; }

        /// <summary>
        /// Gets or sets the User ID of the user that sent the invitation
        /// </summary>
        [JsonProperty(PropertyName = "userId")]
        public long? UserId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "test")]
        public bool? Test { get; set; }

        /// <summary>
        /// Gets or sets the Location ID
        /// </summary>
        [JsonProperty(PropertyName = "locationId")]
        public long? LocationId { get; set; }

        /// <summary>
        /// Gets or sets the ID of the customer
        /// </summary>
        [JsonProperty(PropertyName = "customerId")]
        public long? CustomerId { get; set; }

        /// <summary>
        /// Gets or sets the customers email
        /// </summary>
        [JsonProperty(PropertyName = "email")]
        public string Email { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (PhoneNumber != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(PhoneNumber, "^\\+?[1-9]\\d{1,14}$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "PhoneNumber", "^\\+?[1-9]\\d{1,14}$");
                }
            }
        }
    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Podium.Client.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Location
    /// </summary>
    public partial class Location
    {
        /// <summary>
        /// Initializes a new instance of the Location class.
        /// </summary>
        public Location()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Location class.
        /// </summary>
        /// <param name="locationId">The Location ID.</param>
        /// <param name="locationName">The Location name.</param>
        public Location(long locationId, string locationName = default(string))
        {
            LocationId = locationId;
            LocationName = locationName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the Location ID.
        /// </summary>
        [JsonProperty(PropertyName = "locationId")]
        public long LocationId { get; set; }

        /// <summary>
        /// Gets or sets the Location name.
        /// </summary>
        [JsonProperty(PropertyName = "locationName")]
        public string LocationName { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            //Nothing to validate
        }
    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Podium.Client.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Page
    /// </summary>
    public partial class Page
    {
        /// <summary>
        /// Initializes a new instance of the Page class.
        /// </summary>
        public Page()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Page class.
        /// </summary>
        public Page(long? number = default(long?), long? size = default(long?), long? total = default(long?))
        {
            Number = number;
            Size = size;
            Total = total;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "number")]
        public long? Number { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "size")]
        public long? Size { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "total")]
        public long? Total { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Podium.Client.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Meta
    /// </summary>
    public partial class Meta
    {
        /// <summary>
        /// Initializes a new instance of the Meta class.
        /// </summary>
        public Meta()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Meta class.
        /// </summary>
        /// <param name="totalItems">A</param>
        public Meta(Page page = default(Page), long? totalItems = default(long?))
        {
            Page = page;
            TotalItems = totalItems;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "page")]
        public Page Page { get; set; }

        /// <summary>
        /// Gets or sets a
        /// </summary>
        [JsonProperty(PropertyName = "totalItems")]
        public long? TotalItems { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Podium.Client.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Review
    /// </summary>
    public partial class Review
    {
        /// <summary>
        /// Initializes a new instance of the Review class.
        /// </summary>
        public Review()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Review class.
        /// </summary>
        /// <param name="id">The Review ID</param>
        /// <param name="locationId">The Location ID</param>
        /// <param name="createdAt">The Date and time the Invitation was
        /// created</param>
        /// <param name="publishDate">The Date and time the Invitation was
        /// created</param>
        /// <param name="updatedAt">The Date and time the Invitation was
        /// wupdated</param>
        /// <param name="reviewInvitationId">The Invitation Id</param>
        public Review(long? id = default(long?), string siteReviewId = default(string), string siteName = default(string), long? locationId = default(long?), System.DateTime? createdAt = default(System.DateTime?), System.DateTime? publishDate = default(System.DateTime?), System.DateTime? updatedAt = default(System.DateTime?), double? rating = default(double?), string reviewBody = default(string), long? reviewInvitationId = default(long?), string reviewUrl = default(string), string author = default(string), string authorId = default(string))
        {
            Id = id;
            SiteReviewId = siteReviewId;
            SiteName = siteName;
            LocationId = locationId;
            CreatedAt = createdAt;
            PublishDate = publishDate;
            UpdatedAt = updatedAt;
            Rating = rating;
            ReviewBody = reviewBody;
            ReviewInvitationId = reviewInvitationId;
            ReviewUrl = reviewUrl;
            Author = author;
            AuthorId = authorId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the Review ID
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public long? Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "siteReviewId")]
        public string SiteReviewId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "siteName")]
        public string SiteName { get; set; }

        /// <summary>
        /// Gets or sets the Location ID
        /// </summary>
        [JsonProperty(PropertyName = "locationId")]
        public long? LocationId { get; set; }

        /// <summary>
        /// Gets or sets the Date and time the Invitation was created
        /// </summary>
        [JsonProperty(PropertyName = "createdAt")]
        public System.DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Gets or sets the Date and time the Invitation was created
        /// </summary>
        [JsonProperty(PropertyName = "publishDate")]
        public System.DateTime? PublishDate { get; set; }

        /// <summary>
        /// Gets or sets the Date and time the Invitation was wupdated
        /// </summary>
        [JsonProperty(PropertyName = "updatedAt")]
        public System.DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "rating")]
        public double? Rating { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "reviewBody")]
        public string ReviewBody { get; set; }

        /// <summary>
        /// Gets or sets the Invitation Id
        /// </summary>
        [JsonProperty(PropertyName = "reviewInvitationId")]
        public long? ReviewInvitationId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "reviewUrl")]
        public string ReviewUrl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "author")]
        public string Author { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "authorId")]
        public string AuthorId { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Podium.Client.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// SiteSummary
    /// </summary>
    public partial class SiteSummary
    {
        /// <summary>
        /// Initializes a new instance of the SiteSummary class.
        /// </summary>
        public SiteSummary()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SiteSummary class.
        /// </summary>
        public SiteSummary(double? averageRating = default(double?), long? reviewCount = default(long?), string siteName = default(string))
        {
            AverageRating = averageRating;
            ReviewCount = reviewCount;
            SiteName = siteName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "averageRating")]
        public double? AverageRating { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "reviewCount")]
        public long? ReviewCount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "siteName")]
        public string SiteName { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Podium.Client.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// UserSummary
    /// </summary>
    public partial class UserSummary
    {
        /// <summary>
        /// Initializes a new instance of the UserSummary class.
        /// </summary>
        public UserSummary()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UserSummary class.
        /// </summary>
        /// <param name="userName">The Users Username</param>
        public UserSummary(double? averageRating = default(double?), long? clicked = default(long?), long? inviteCount = default(long?), long? recommended = default(long?), string userName = default(string))
        {
            AverageRating = averageRating;
            Clicked = clicked;
            InviteCount = inviteCount;
            Recommended = recommended;
            UserName = userName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "averageRating")]
        public double? AverageRating { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "clicked")]
        public long? Clicked { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "inviteCount")]
        public long? InviteCount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "recommended")]
        public long? Recommended { get; set; }

        /// <summary>
        /// Gets or sets the Users Username
        /// </summary>
        [JsonProperty(PropertyName = "userName")]
        public string UserName { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Podium.Client.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// LocationSummary
    /// </summary>
    public partial class LocationSummary
    {
        /// <summary>
        /// Initializes a new instance of the LocationSummary class.
        /// </summary>
        public LocationSummary()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LocationSummary class.
        /// </summary>
        public LocationSummary(double? averageRating = default(double?), double? clickRate = default(double?), long? inviteCount = default(long?), long? recommended = default(long?), long? totalReviews = default(long?))
        {
            AverageRating = averageRating;
            ClickRate = clickRate;
            InviteCount = inviteCount;
            Recommended = recommended;
            TotalReviews = totalReviews;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "averageRating")]
        public double? AverageRating { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "clickRate")]
        public double? ClickRate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "inviteCount")]
        public long? InviteCount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "recommended")]
        public long? Recommended { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "totalReviews")]
        public long? TotalReviews { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Podium.Client.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    public partial class LocationsByOrgIdGetOKResponse
    {
        /// <summary>
        /// Initializes a new instance of the LocationsByOrgIdGetOKResponse
        /// class.
        /// </summary>
        public LocationsByOrgIdGetOKResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LocationsByOrgIdGetOKResponse
        /// class.
        /// </summary>
        public LocationsByOrgIdGetOKResponse(IList<Location> locations = default(IList<Location>), Meta meta = default(Meta))
        {
            Locations = locations;
            Meta = meta;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "locations")]
        public IList<Location> Locations { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "meta")]
        public Meta Meta { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Podium.Client.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    public partial class InvitationsByLocationGetOKResponse
    {
        /// <summary>
        /// Initializes a new instance of the
        /// InvitationsByLocationGetOKResponse class.
        /// </summary>
        public InvitationsByLocationGetOKResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// InvitationsByLocationGetOKResponse class.
        /// </summary>
        public InvitationsByLocationGetOKResponse(IList<Invitation> invites = default(IList<Invitation>), Meta meta = default(Meta))
        {
            Invites = invites;
            Meta = meta;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "invites")]
        public IList<Invitation> Invites { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "meta")]
        public Meta Meta { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Podium.Client.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    public partial class SummaryByUserIdGetOKResponse
    {
        /// <summary>
        /// Initializes a new instance of the SummaryByUserIdGetOKResponse
        /// class.
        /// </summary>
        public SummaryByUserIdGetOKResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SummaryByUserIdGetOKResponse
        /// class.
        /// </summary>
        public SummaryByUserIdGetOKResponse(UserSummary summary = default(UserSummary))
        {
            Summary = summary;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "summary")]
        public UserSummary Summary { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Podium.Client.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    public partial class SummaryByLocationIdGetOKResponse
    {
        /// <summary>
        /// Initializes a new instance of the SummaryByLocationIdGetOKResponse
        /// class.
        /// </summary>
        public SummaryByLocationIdGetOKResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SummaryByLocationIdGetOKResponse
        /// class.
        /// </summary>
        public SummaryByLocationIdGetOKResponse(LocationSummary summary = default(LocationSummary))
        {
            Summary = summary;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "summary")]
        public LocationSummary Summary { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Podium.Client.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    public partial class ReviewsByLocationGetOKResponse
    {
        /// <summary>
        /// Initializes a new instance of the ReviewsByLocationGetOKResponse
        /// class.
        /// </summary>
        public ReviewsByLocationGetOKResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ReviewsByLocationGetOKResponse
        /// class.
        /// </summary>
        public ReviewsByLocationGetOKResponse(IList<Review> reviews = default(IList<Review>), Meta meta = default(Meta))
        {
            Reviews = reviews;
            Meta = meta;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "reviews")]
        public IList<Review> Reviews { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "meta")]
        public Meta Meta { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Podium.Client.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    public partial class SiteSummaryByLocationIdGetOKResponse
    {
        /// <summary>
        /// Initializes a new instance of the
        /// SiteSummaryByLocationIdGetOKResponse class.
        /// </summary>
        public SiteSummaryByLocationIdGetOKResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// SiteSummaryByLocationIdGetOKResponse class.
        /// </summary>
        public SiteSummaryByLocationIdGetOKResponse(IList<SiteSummary> siteSummary = default(IList<SiteSummary>), Meta meta = default(Meta))
        {
            SiteSummary = siteSummary;
            Meta = meta;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "siteSummary")]
        public IList<SiteSummary> SiteSummary { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "meta")]
        public Meta Meta { get; set; }

    }
}
